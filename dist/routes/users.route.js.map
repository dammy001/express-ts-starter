{"version":3,"sources":["../../src/routes/users.route.ts"],"sourcesContent":["import { type IRouter, NextFunction, Request, Response, Router } from 'express'\nimport rateLimit, { type Options } from 'express-rate-limit'\nimport { authenticate } from '../middlewares/auth.middleware'\nimport { PostController, UserController } from '@/controllers'\nimport { CreateUserDto } from '@/dtos'\nimport { validateRequest } from '@/interceptors'\nimport { CreatePostDto } from '@/dtos/posts'\n\nconst usersRoutes: IRouter = Router()\n\nconst userController = new UserController()\nconst postController = new PostController()\n\nconst createLimiter = rateLimit({\n  windowMs: 2 * 60 * 1000, // 2 minutes,\n  max: 5,\n  message: 'Too many attempts. Please try again after 2 minutes',\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  keyGenerator: (req: Request, res: Response) => {\n    return req.body?.email || req.params.id || req.ip\n  },\n  handler: (req: Request, res: Response, next: NextFunction, optionsUsed: Options) => {\n    return res.status(optionsUsed.statusCode).json({ status: false, message: optionsUsed.message })\n  },\n})\n\nusersRoutes.post('', createLimiter, validateRequest(CreateUserDto, 'body'), userController.create)\nusersRoutes.get('', authenticate, userController.findAll)\n\nusersRoutes.get('/:id/posts', authenticate, postController.getUserPosts)\nusersRoutes.post(\n  '/:id/posts',\n  createLimiter,\n  authenticate,\n  validateRequest(CreatePostDto, 'body'),\n  postController.createPost,\n)\n\nusersRoutes.get('/ranking', authenticate, userController.getTopUsers)\n\nexport default usersRoutes\n"],"names":["usersRoutes","Router","userController","UserController","postController","PostController","createLimiter","rateLimit","windowMs","max","message","standardHeaders","legacyHeaders","skipSuccessfulRequests","keyGenerator","req","res","body","email","params","id","ip","handler","next","optionsUsed","status","statusCode","json","post","validateRequest","CreateUserDto","create","get","authenticate","findAll","getUserPosts","CreatePostDto","createPost","getTopUsers"],"mappings":";;;;+BA2CA;;;eAAA;;;yBA3CsE;yEAC9B;gCACX;6BACkB;sBACjB;8BACE;uBACF;;;;;;AAE9B,MAAMA,cAAuBC,IAAAA,eAAM;AAEnC,MAAMC,iBAAiB,IAAIC,2BAAc;AACzC,MAAMC,iBAAiB,IAAIC,2BAAc;AAEzC,MAAMC,gBAAgBC,IAAAA,yBAAS,EAAC;IAC9BC,UAAU,IAAI,KAAK;IACnBC,KAAK;IACLC,SAAS;IACTC,iBAAiB;IACjBC,eAAe;IACfC,wBAAwB;IACxB,6DAA6D;IAC7DC,cAAc,CAACC,KAAcC;QAC3B,OAAOD,IAAIE,IAAI,EAAEC,SAASH,IAAII,MAAM,CAACC,EAAE,IAAIL,IAAIM,EAAE;IACnD;IACAC,SAAS,CAACP,KAAcC,KAAeO,MAAoBC;QACzD,OAAOR,IAAIS,MAAM,CAACD,YAAYE,UAAU,EAAEC,IAAI,CAAC;YAAEF,QAAQ;YAAOf,SAASc,YAAYd,OAAO;QAAC;IAC/F;AACF;AAEAV,YAAY4B,IAAI,CAAC,IAAItB,eAAeuB,IAAAA,6BAAe,EAACC,mBAAa,EAAE,SAAS5B,eAAe6B,MAAM;AACjG/B,YAAYgC,GAAG,CAAC,IAAIC,4BAAY,EAAE/B,eAAegC,OAAO;AAExDlC,YAAYgC,GAAG,CAAC,cAAcC,4BAAY,EAAE7B,eAAe+B,YAAY;AACvEnC,YAAY4B,IAAI,CACd,cACAtB,eACA2B,4BAAY,EACZJ,IAAAA,6BAAe,EAACO,oBAAa,EAAE,SAC/BhC,eAAeiC,UAAU;AAG3BrC,YAAYgC,GAAG,CAAC,YAAYC,4BAAY,EAAE/B,eAAeoC,WAAW;MAEpE,WAAetC"}