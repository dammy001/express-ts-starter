"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const generator_helper_1 = require("@prisma/generator-helper");
const header = `// This file was generated by a custom prisma generator, do not edit manually.\n`;
(0, generator_helper_1.generatorHandler)({
    onManifest() {
        return {
            defaultOutput: './enums/index.ts',
            prettyName: 'Prisma Enum Generator',
        };
    },
    async onGenerate(options) {
        const enums = options.dmmf.datamodel.enums;
        const output = enums.map((e) => {
            let enumString = `export const ${e.name} = {\n`;
            e.values.forEach(({ name: value }) => {
                enumString += `  ${value}: "${value}",\n`;
            });
            enumString += `} as const;\n\n`;
            enumString += `export type ${e.name} = (typeof ${e.name})[keyof typeof ${e.name}];\n`;
            return enumString;
        });
        const outputFile = options.generator.output;
        if (!outputFile || !outputFile.value) {
            throw new Error('No output file specified');
        }
        const outputPath = node_path_1.default.resolve(outputFile.value);
        await promises_1.default.mkdir(node_path_1.default.dirname(outputPath), { recursive: true });
        await promises_1.default.writeFile(outputPath, header + output.join('\n'), 'utf-8');
    },
});
