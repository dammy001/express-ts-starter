{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport jwt from 'jsonwebtoken'\nimport { StatusCode } from '@utils'\nimport { HttpException } from '@/exceptions'\nimport { JWT_SECRET, SECRET_KEY } from '@/config'\nimport { prisma } from '@/lib'\n\nexport const authenticate = async (req: Request, res: Response, next: NextFunction) => {\n  let decoded: jwt.JwtPayload\n\n  try {\n    const token = req.headers.authorization?.split(' ')[1]\n\n    if (!token) throw new HttpException('Unauthenticated', StatusCode.UNAUTHORIZED)\n\n    if (token === SECRET_KEY) {\n      return next()\n    }\n\n    decoded = jwt.verify(token, JWT_SECRET) as jwt.JwtPayload\n\n    if (!(await prisma.user.findFirst({ where: { id: decoded.user.id }, select: { id: true } }))) {\n      res.status(StatusCode.BAD_REQUEST).json({ message: 'User not found', status: false })\n    }\n  } catch (err) {\n    return next(err)\n  }\n\n  req.user = decoded.user\n\n  next()\n}\n"],"names":["authenticate","req","res","next","decoded","token","headers","authorization","split","HttpException","StatusCode","UNAUTHORIZED","SECRET_KEY","jwt","verify","JWT_SECRET","prisma","user","findFirst","where","id","select","status","BAD_REQUEST","json","message","err"],"mappings":";;;;+BAOaA;;;eAAAA;;;qEANG;uBACW;4BACG;wBACS;qBAChB;;;;;;AAEhB,MAAMA,eAAe,OAAOC,KAAcC,KAAeC;IAC9D,IAAIC;IAEJ,IAAI;QACF,MAAMC,QAAQJ,IAAIK,OAAO,CAACC,aAAa,EAAEC,MAAM,IAAI,CAAC,EAAE;QAEtD,IAAI,CAACH,OAAO,MAAM,IAAII,yBAAa,CAAC,mBAAmBC,iBAAU,CAACC,YAAY;QAE9E,IAAIN,UAAUO,kBAAU,EAAE;YACxB,OAAOT;QACT;QAEAC,UAAUS,qBAAG,CAACC,MAAM,CAACT,OAAOU,kBAAU;QAEtC,IAAI,CAAE,MAAMC,WAAM,CAACC,IAAI,CAACC,SAAS,CAAC;YAAEC,OAAO;gBAAEC,IAAIhB,QAAQa,IAAI,CAACG,EAAE;YAAC;YAAGC,QAAQ;gBAAED,IAAI;YAAK;QAAE,IAAK;YAC5FlB,IAAIoB,MAAM,CAACZ,iBAAU,CAACa,WAAW,EAAEC,IAAI,CAAC;gBAAEC,SAAS;gBAAkBH,QAAQ;YAAM;QACrF;IACF,EAAE,OAAOI,KAAK;QACZ,OAAOvB,KAAKuB;IACd;IAEAzB,IAAIgB,IAAI,GAAGb,QAAQa,IAAI;IAEvBd;AACF"}