{"version":3,"sources":["../../src/middlewares/error.middleware.test.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { ErrorInterceptor } from './error.middleware'\nimport { StatusCode } from '@/utils'\n\ndescribe('ErrorInterceptor', () => {\n  it('should handle errors and send an appropriate response', () => {\n    // Mocking Express objects\n    const mockRequest = {} as Request\n    const mockResponse = {\n      status: vi.fn().mockReturnThis(),\n      json: vi.fn(),\n    } as unknown as Response\n    const mockNext = vi.fn() as unknown as NextFunction\n\n    // Creating a mock error\n    const mockError = {\n      statusCode: StatusCode.NOT_FOUND,\n      message: 'Resource not found',\n    }\n\n    // Calling the ErrorInterceptor\n    ErrorInterceptor(mockError, mockRequest, mockResponse, mockNext)\n\n    // Assertions\n    expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.NOT_FOUND)\n    expect(mockResponse.json).toHaveBeenCalledWith({\n      status: false,\n      message: 'Resource not found',\n    })\n  })\n\n  it('should handle errors with default message in production', () => {\n    // Mocking Express objects\n    const mockRequest = {} as Request\n    const mockResponse = {\n      status: vi.fn().mockReturnThis(),\n      json: vi.fn(),\n    } as unknown as Response\n    const mockNext = vi.fn() as unknown as NextFunction\n\n    // Creating a mock error\n    const mockError = {\n      statusCode: StatusCode.SERVER_ERROR,\n      message: 'Internal server error',\n    }\n\n    // Mocking the production environment\n    const originalIsProduction = process.env.NODE_ENV\n    process.env.NODE_ENV = 'production'\n\n    // Calling the ErrorInterceptor\n    ErrorInterceptor(mockError, mockRequest, mockResponse, mockNext)\n\n    // Assertions\n    expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.SERVER_ERROR)\n    expect(mockResponse.json).toHaveBeenCalledWith({\n      status: false,\n      message: 'Internal server error',\n    })\n\n    // Restoring the environment variable\n    process.env.NODE_ENV = originalIsProduction\n  })\n})\n"],"names":["describe","it","mockRequest","mockResponse","status","vi","fn","mockReturnThis","json","mockNext","mockError","statusCode","StatusCode","NOT_FOUND","message","ErrorInterceptor","expect","toHaveBeenCalledWith","SERVER_ERROR","originalIsProduction","process","env","NODE_ENV"],"mappings":";;;;iCACiC;uBACN;AAE3BA,SAAS,oBAAoB;IAC3BC,GAAG,yDAAyD;QAC1D,0BAA0B;QAC1B,MAAMC,cAAc,CAAC;QACrB,MAAMC,eAAe;YACnBC,QAAQC,GAAGC,EAAE,GAAGC,cAAc;YAC9BC,MAAMH,GAAGC,EAAE;QACb;QACA,MAAMG,WAAWJ,GAAGC,EAAE;QAEtB,wBAAwB;QACxB,MAAMI,YAAY;YAChBC,YAAYC,iBAAU,CAACC,SAAS;YAChCC,SAAS;QACX;QAEA,+BAA+B;QAC/BC,IAAAA,iCAAgB,EAACL,WAAWR,aAAaC,cAAcM;QAEvD,aAAa;QACbO,OAAOb,aAAaC,MAAM,EAAEa,oBAAoB,CAACL,iBAAU,CAACC,SAAS;QACrEG,OAAOb,aAAaK,IAAI,EAAES,oBAAoB,CAAC;YAC7Cb,QAAQ;YACRU,SAAS;QACX;IACF;IAEAb,GAAG,2DAA2D;QAC5D,0BAA0B;QAC1B,MAAMC,cAAc,CAAC;QACrB,MAAMC,eAAe;YACnBC,QAAQC,GAAGC,EAAE,GAAGC,cAAc;YAC9BC,MAAMH,GAAGC,EAAE;QACb;QACA,MAAMG,WAAWJ,GAAGC,EAAE;QAEtB,wBAAwB;QACxB,MAAMI,YAAY;YAChBC,YAAYC,iBAAU,CAACM,YAAY;YACnCJ,SAAS;QACX;QAEA,qCAAqC;QACrC,MAAMK,uBAAuBC,QAAQC,GAAG,CAACC,QAAQ;QACjDF,QAAQC,GAAG,CAACC,QAAQ,GAAG;QAEvB,+BAA+B;QAC/BP,IAAAA,iCAAgB,EAACL,WAAWR,aAAaC,cAAcM;QAEvD,aAAa;QACbO,OAAOb,aAAaC,MAAM,EAAEa,oBAAoB,CAACL,iBAAU,CAACM,YAAY;QACxEF,OAAOb,aAAaK,IAAI,EAAES,oBAAoB,CAAC;YAC7Cb,QAAQ;YACRU,SAAS;QACX;QAEA,qCAAqC;QACrCM,QAAQC,GAAG,CAACC,QAAQ,GAAGH;IACzB;AACF"}