{"version":3,"sources":["../../src/repositories/base.repository.ts"],"sourcesContent":["import { type ClassConstructor, plainToInstance } from 'class-transformer'\n\n// missing type safety here: Issue with prisma not having some generics to work with for dynamic repository\nexport class BaseRepository<TModel = any> {\n  constructor(\n    protected readonly model: TModel,\n    protected entity: ClassConstructor<any>,\n  ) {}\n\n  async findOne<WhereInputArgs, SelectArgs = object, IncludeArgs = object>(\n    where: WhereInputArgs,\n    select?: SelectArgs,\n    include?: IncludeArgs,\n  ) {\n    // @ts-expect-error typing\n    const data = await this.model.findFirst({\n      where,\n      ...(!select && include && { include }),\n      ...(!include && select && { select }),\n    })\n\n    return this.mapEntity(data)\n  }\n\n  async findById<SelectArgs = object>(id: string, select?: SelectArgs) {\n    return this.mapEntity(await this.findOne<any>({ id, select }))\n  }\n\n  async update<WhereInputArgs, TData = any, SelectArgs = object>(\n    where: WhereInputArgs,\n    data: TData,\n    select?: SelectArgs,\n  ): Promise<any> {\n    // @ts-expect-error typing\n    return await this.model.update({\n      where,\n      data,\n      ...{ select },\n    })\n  }\n\n  async create<TData = any, SelectArgs = object>(data: TData, select?: SelectArgs): Promise<any> {\n    // @ts-expect-error typing\n    const created = await this.model.create({\n      data,\n      select,\n    })\n\n    return this.mapEntity(created)\n  }\n\n  async upsert<WhereInputArgs, CreateInput, UpdateInput>(\n    where: WhereInputArgs,\n    create: CreateInput,\n    update: UpdateInput,\n  ): Promise<any> {\n    // @ts-expect-error typing\n    return await this.model.upsert({\n      where,\n      create,\n      update,\n    })\n  }\n\n  async delete<WhereInputArgs>(where: WhereInputArgs): Promise<any> {\n    // @ts-expect-error typing\n    return await this.model.delete({\n      where,\n    })\n  }\n\n  protected mapEntity<TData>(data: TData): TData extends null ? null : any {\n    return plainToInstance(this.entity, JSON.parse(JSON.stringify(data))) as any\n  }\n}\n"],"names":["BaseRepository","findOne","where","select","include","data","model","findFirst","mapEntity","findById","id","update","create","created","upsert","delete","plainToInstance","entity","JSON","parse","stringify","constructor"],"mappings":";;;;+BAGaA;;;eAAAA;;;kCAH0C;;;;;;;;;;;;;;AAGhD,MAAMA;IAMX,MAAMC,QACJC,KAAqB,EACrBC,MAAmB,EACnBC,OAAqB,EACrB;QACA,0BAA0B;QAC1B,MAAMC,OAAO,MAAM,IAAI,CAACC,KAAK,CAACC,SAAS,CAAC;YACtCL;YACA,GAAI,CAACC,UAAUC,WAAW;gBAAEA;YAAQ,CAAC;YACrC,GAAI,CAACA,WAAWD,UAAU;gBAAEA;YAAO,CAAC;QACtC;QAEA,OAAO,IAAI,CAACK,SAAS,CAACH;IACxB;IAEA,MAAMI,SAA8BC,EAAU,EAAEP,MAAmB,EAAE;QACnE,OAAO,IAAI,CAACK,SAAS,CAAC,MAAM,IAAI,CAACP,OAAO,CAAM;YAAES;YAAIP;QAAO;IAC7D;IAEA,MAAMQ,OACJT,KAAqB,EACrBG,IAAW,EACXF,MAAmB,EACL;QACd,0BAA0B;QAC1B,OAAO,MAAM,IAAI,CAACG,KAAK,CAACK,MAAM,CAAC;YAC7BT;YACAG;YACA,GAAG;gBAAEF;YAAO,CAAC;QACf;IACF;IAEA,MAAMS,OAAyCP,IAAW,EAAEF,MAAmB,EAAgB;QAC7F,0BAA0B;QAC1B,MAAMU,UAAU,MAAM,IAAI,CAACP,KAAK,CAACM,MAAM,CAAC;YACtCP;YACAF;QACF;QAEA,OAAO,IAAI,CAACK,SAAS,CAACK;IACxB;IAEA,MAAMC,OACJZ,KAAqB,EACrBU,MAAmB,EACnBD,MAAmB,EACL;QACd,0BAA0B;QAC1B,OAAO,MAAM,IAAI,CAACL,KAAK,CAACQ,MAAM,CAAC;YAC7BZ;YACAU;YACAD;QACF;IACF;IAEA,MAAMI,OAAuBb,KAAqB,EAAgB;QAChE,0BAA0B;QAC1B,OAAO,MAAM,IAAI,CAACI,KAAK,CAACS,MAAM,CAAC;YAC7Bb;QACF;IACF;IAEUM,UAAiBH,IAAW,EAAmC;QACvE,OAAOW,IAAAA,iCAAe,EAAC,IAAI,CAACC,MAAM,EAAEC,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAACf;IAChE;IArEAgB,YACqBf,OACTW,OACV;+BAFmBX;+BACTW;qBADSX;sBACTW;IACT;AAmEL"}