{"version":3,"sources":["../../../src/controllers/comment/comment.controller.test.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { CommentController } from './comment.controller'\nimport { prisma } from '@/lib'\nimport { StatusCode } from '@/utils'\n\ndescribe('CommentController', () => {\n  let mockRequest: Request\n  let mockResponse: Response\n  let mockNext: NextFunction\n\n  beforeEach(() => {\n    mockRequest = {\n      body: { userId: 'user-id', comment: 'Test comment' },\n      params: { id: 'post-id' },\n    } as any\n    mockResponse = {\n      status: vi.fn().mockReturnThis(),\n      json: vi.fn(),\n    } as any\n    mockNext = vi.fn() as any\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('addCommentToPost', () => {\n    it('should add a comment to the post and return success response', async () => {\n      // Mock Prisma functions\n      const mockFindFirst = vi.fn()\n      const mockCreate = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.post.findFirst = mockFindFirst\n      prisma.comment.create = mockCreate\n\n      // Mock successful findFirst calls\n      mockFindFirst.mockResolvedValue({ id: 'user-id' })\n\n      // Mock successful create call\n      mockCreate.mockResolvedValue({\n        id: 'comment-id',\n        comment: 'Test comment',\n        createdAt: '2023-08-27T08:13:36.755Z',\n      })\n\n      // Instantiate CommentController\n      const commentController = new CommentController()\n\n      // Call the method\n      await commentController.addCommentToPost(mockRequest, mockResponse, mockNext)\n\n      // Assertion\n      expect(mockFindFirst).toHaveBeenCalledTimes(2) // user.findFirst and post.findFirst\n      expect(mockCreate).toHaveBeenCalledWith({\n        data: { comment: 'Test comment', postId: 'post-id', userId: 'user-id' },\n        select: { id: true, comment: true, createdAt: true },\n      })\n      expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.CREATED)\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Comment Created Successfully',\n        data: { id: 'comment-id', comment: 'Test comment', createdAt: '2023-08-27T08:13:36.755Z' },\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n\n    it('should call next with an error if an exception occurs during Prisma findFirst', async () => {\n      // Mock Prisma functions\n      prisma.user.findFirst = vi.fn().mockRejectedValue(new Error('Mocked error'))\n\n      // Instantiate CommentController\n      const commentController = new CommentController()\n\n      // Call the method\n      await commentController.addCommentToPost(mockRequest, mockResponse, mockNext)\n\n      // Assertion\n      expect(mockNext).toHaveBeenCalledWith(expect.any(Error))\n    })\n\n    it('should handle unexpected exceptions and call next with an error', async () => {\n      // Mock Prisma functions\n      const mockFindFirst = vi.fn()\n      const mockCreate = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.post.findFirst = mockFindFirst\n      prisma.comment.create = mockCreate\n\n      // Mock successful findFirst calls\n      mockFindFirst.mockResolvedValue({ id: 'user-id' })\n\n      // Mock Prisma comment.create throwing an unexpected exception\n      mockCreate.mockImplementation(() => {\n        throw new Error('Unexpected error')\n      })\n\n      // Instantiate CommentController\n      const commentController = new CommentController()\n\n      // Call the method\n      await commentController.addCommentToPost(mockRequest, mockResponse, mockNext)\n\n      // Assertion\n      expect(mockNext).toHaveBeenCalledWith(expect.any(Error))\n    })\n  })\n})\n"],"names":["describe","mockRequest","mockResponse","mockNext","beforeEach","body","userId","comment","params","id","status","vi","fn","mockReturnThis","json","afterEach","clearAllMocks","it","mockFindFirst","mockCreate","prisma","user","findFirst","post","create","mockResolvedValue","createdAt","commentController","CommentController","addCommentToPost","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","data","postId","select","StatusCode","CREATED","success","message","not","toHaveBeenCalled","mockRejectedValue","Error","any","mockImplementation"],"mappings":"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"}