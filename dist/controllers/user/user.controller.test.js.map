{"version":3,"sources":["../../../src/controllers/user/user.controller.test.ts"],"sourcesContent":["import jwt from 'jsonwebtoken'\nimport { NextFunction, Request, Response } from 'express'\nimport { UserController } from './user.controller' // Update with the correct path\nimport { prisma } from '@/lib'\nimport { JWT_SECRET } from '@/config'\nimport { StatusCode } from '@/utils'\n\ndescribe('UserController', () => {\n  let mockRequest: Request\n  let mockResponse: Response\n  let mockNext: NextFunction\n\n  beforeEach(() => {\n    mockRequest = {\n      body: {},\n    } as any\n    mockResponse = {\n      status: vi.fn().mockReturnThis(),\n      json: vi.fn(),\n    } as any\n    mockNext = vi.fn() as any\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('create', () => {\n    it('should create a new user and return success response with token', async () => {\n      // Mock Prisma functions\n      const mockFindFirst = vi.fn()\n      const mockCreate = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.user.create = mockCreate\n\n      mockFindFirst.mockResolvedValue(null)\n\n      const mockCreatedUser = {\n        id: 'user-id',\n        email: 'test@example.com',\n        firstName: 'Damilare',\n        lastName: 'Anjorin',\n        userName: 'dammy',\n        // Add other user properties as needed\n      }\n      mockCreate.mockResolvedValue(mockCreatedUser)\n\n      const mockToken = 'mocked-token'\n      jwt.sign = vi.fn().mockReturnValue(mockToken)\n\n      const userController = new UserController()\n\n      mockRequest.body = {\n        email: 'test@example.com',\n        firstName: 'Damilare',\n        lastName: 'Anjorin',\n        userName: 'dammy',\n      }\n\n      await userController.create(mockRequest, mockResponse, mockNext)\n\n      expect(mockFindFirst).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n        select: expect.any(Object),\n      })\n\n      expect(mockCreate).toHaveBeenCalledWith({\n        data: {\n          email: 'test@example.com',\n          firstName: 'Damilare',\n          lastName: 'Anjorin',\n          userName: 'dammy',\n        },\n        select: expect.any(Object),\n      })\n      expect(jwt.sign).toHaveBeenCalledWith({ user: mockCreatedUser }, JWT_SECRET, {\n        expiresIn: '24h',\n      })\n\n      expect(mockResponse.status).toHaveBeenCalledWith(expect.any(Number))\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: {\n          token: 'mocked-token',\n          user: {\n            createdAt: undefined,\n            deletedAt: undefined,\n            email: 'test@example.com',\n            firstName: 'Damilare',\n            lastName: 'Anjorin',\n            userName: 'dammy',\n            id: 'user-id',\n            updatedAt: undefined,\n          },\n        },\n        message: 'Successful',\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n\n    it('should handle error when user already exists', async () => {\n      const mockFindFirst = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n\n      const mockExistingUser = {\n        id: 'existing-user-id',\n        email: 'test@example.com',\n      }\n      mockFindFirst.mockResolvedValue(mockExistingUser)\n\n      const userController = new UserController()\n\n      mockRequest.body = {\n        email: 'test@example.com',\n      }\n\n      await userController.create(mockRequest, mockResponse, mockNext)\n\n      expect(mockFindFirst).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n        select: expect.any(Object),\n      })\n\n      expect(mockResponse.status).toHaveBeenCalledWith(expect.any(Number))\n\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        data: {},\n        success: false,\n        message: 'User already exists',\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n\n    it('should handle and pass errors to the next middleware', async () => {\n      const mockFindFirst = vi.fn()\n      const mockCreate = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.user.create = mockCreate\n\n      const mockError = new Error('Some error')\n      mockCreate.mockRejectedValue(mockError)\n\n      const userController = new UserController()\n\n      mockRequest.body = {\n        email: 'test@example.com',\n      }\n\n      await userController.create(mockRequest, mockResponse, mockNext)\n\n      expect(mockFindFirst).toHaveBeenCalledWith({\n        where: { email: 'test@example.com' },\n        select: expect.any(Object),\n      })\n      expect(mockCreate).toHaveBeenCalledWith({\n        data: {\n          email: 'test@example.com',\n        },\n        select: expect.any(Object),\n      })\n      expect(mockResponse.status).not.toHaveBeenCalled()\n      expect(mockResponse.json).not.toHaveBeenCalled()\n      expect(mockNext).toHaveBeenCalledWith(mockError)\n    })\n  })\n\n  describe.skip('findAll', () => {\n    it('should retrieve all users and return a success response', async () => {\n      // Mock Prisma function\n      const mockPaginate = vi.fn()\n\n      // Mock successful paginate call\n      const mockUserList = [\n        { id: 'user-id-1', email: 'user1@example.com' },\n        { id: 'user-id-2', email: 'user2@example.com' },\n      ]\n\n      mockPaginate.mockResolvedValue({\n        data: mockUserList,\n        meta: {\n          total: mockUserList.length,\n          lastPage: 1,\n          current: 1,\n          perPage: 10,\n          prev: null,\n          next: null,\n        },\n      })\n\n      // Mock createPaginator function\n      const mockCreatePaginator = vi.fn().mockReturnValue(mockPaginate)\n\n      const mocks = vi.hoisted(() => {\n        return {\n          createPaginator: vi.fn().mockReturnValue(\n            vi.fn().mockReturnValue({\n              data: [\n                { id: 'user-id-1', email: 'user1@example.com' },\n                { id: 'user-id-2', email: 'user2@example.com' },\n              ],\n              meta: {\n                total: 2,\n                lastPage: 1,\n                current: 1,\n                perPage: 10,\n                prev: null,\n                next: null,\n              },\n            }),\n          ),\n        }\n      })\n\n      vi.mock('@/utils', async () => {\n        const actual = await vi.importActual('@/utils')\n        return {\n          ...(actual as any),\n          createPaginator: mocks.createPaginator,\n        }\n      })\n\n      const userController = new UserController()\n\n      mockRequest.query = { page: '1' }\n\n      await userController.findAll(mockRequest, mockResponse, mockNext)\n\n      // Assertion\n      expect(mockCreatePaginator).toHaveBeenCalledWith({ perPage: 20 })\n      expect(mockPaginate).toHaveBeenCalledWith(prisma.user, expect.any(Object), { page: '1' })\n      expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.OK)\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: mockUserList,\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["describe","mockRequest","mockResponse","mockNext","beforeEach","body","status","vi","fn","mockReturnThis","json","afterEach","clearAllMocks","it","mockFindFirst","mockCreate","prisma","user","findFirst","create","mockResolvedValue","mockCreatedUser","id","email","firstName","lastName","userName","mockToken","jwt","sign","mockReturnValue","userController","UserController","expect","toHaveBeenCalledWith","where","select","any","Object","data","JWT_SECRET","expiresIn","Number","success","token","createdAt","undefined","deletedAt","updatedAt","message","not","toHaveBeenCalled","mockExistingUser","mockError","Error","mockRejectedValue","skip","mockPaginate","mockUserList","meta","total","length","lastPage","current","perPage","prev","next","mockCreatePaginator","mocks","hoisted","createPaginator","mock","actual","importActual","query","page","findAll","StatusCode","OK"],"mappings":"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"}