{"version":3,"sources":["../../../src/controllers/user/user.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { Prisma, User } from '@prisma/client'\nimport jwt from 'jsonwebtoken'\nimport { Controller } from '../abstract.controller'\nimport { StatusCode, createPaginator } from '@/utils'\nimport { prisma, userSelect } from '@/lib'\nimport { UserEntity } from '@/entities'\nimport { JWT_SECRET } from '@/config'\n\nconst paginate = createPaginator({ perPage: 20 })\n\nexport class UserController extends Controller {\n  async create(\n    req: Request,\n    res: Response,\n    next: NextFunction,\n  ): Promise<Response<any, Record<string, any>> | undefined> {\n    try {\n      if (await prisma.user.findFirst({ where: { email: req.body.email }, select: userSelect })) {\n        return Controller.error(res, 'User already exists', {}, StatusCode.BAD_REQUEST)\n      }\n\n      const user = await prisma.user.create({ data: { ...req.body }, select: userSelect })\n\n      return Controller.success(res, {\n        user: Controller.mapEntity(UserEntity, user),\n        token: jwt.sign({ user }, JWT_SECRET, { expiresIn: '24h' }),\n      })\n    } catch (err) {\n      next(err)\n    }\n  }\n\n  async findAll(req: Request, res: Response, next: NextFunction) {\n    try {\n      // Generic types can be passed to \"paginate\",\n      // so args and result will be typed and autocompleted\n      const result = await paginate<User, Prisma.UserFindManyArgs>(\n        prisma.user,\n        {\n          select: {\n            ...userSelect,\n          },\n          orderBy: {\n            createdAt: 'desc',\n          },\n        },\n        { page: req.query.page as string },\n      )\n\n      return Controller.success(res, result)\n    } catch (err) {\n      next(err)\n    }\n  }\n\n  async getTopUsers(req: Request, res: Response, next: NextFunction) {\n    try {\n      // The UserWithComments CTE identifies users who have at least one comment.\n      // The main query joins the data from the UserPostCounts CTE,\n      // filtering only those users who have comments based on the UserWithComments CTE.\n      // The LEFT JOIN LATERAL clause retrieves the latest comment for each post while considering the specific user.\n      // The final query retrieves the top 3 users with the most posts and includes their latest comments.\n      return Controller.success(\n        res,\n        await prisma.$queryRaw`\n          WITH UserPostCounts AS (\n            SELECT\n              u.\"id\" AS user_id,\n              u.\"firstName\" AS user_name,\n              u.\"lastName\" AS last_name,\n              COUNT(p.\"id\") AS post_count,\n              ROW_NUMBER() OVER (ORDER BY COUNT(p.\"id\") DESC) AS user_rank\n            FROM \"users\" u LEFT JOIN \"posts\" p ON u.\"id\" = p.\"userId\" GROUP BY u.\"id\"\n          ),\n          UserWithComments AS (\n            SELECT DISTINCT u.\"id\" AS user_id FROM \"users\" u\n            JOIN \"comments\" c ON u.\"id\" = c.\"userId\"\n          )\n          SELECT\n            upc.user_id,\n            upc.user_name,\n            upc.last_name,\n            p.\"title\" AS post_title,\n            c.\"comment\" AS comment_content,\n            c.\"createdAt\" AS comment_createdAt\n          FROM\n            UserPostCounts upc\n          JOIN\n            \"posts\" p ON upc.user_id = p.\"userId\"\n          JOIN\n            \"users\" u ON upc.user_id = u.\"id\"\n          JOIN LATERAL (\n            SELECT \"comment\", \"createdAt\"\n            FROM \"comments\" c\n            WHERE c.\"postId\" = p.\"id\" AND c.\"userId\" = u.\"id\"\n            ORDER BY c.\"createdAt\" DESC\n            LIMIT 1\n          ) c ON true\n          JOIN\n            UserWithComments uwc ON upc.user_id = uwc.user_id\n          WHERE\n            upc.user_rank <= 3\n          ORDER BY\n            upc.user_rank;\n        `,\n      )\n    } catch (err) {\n      next(err)\n    }\n  }\n}\n"],"names":["UserController","paginate","createPaginator","perPage","Controller","create","req","res","next","prisma","user","findFirst","where","email","body","select","userSelect","error","StatusCode","BAD_REQUEST","data","success","mapEntity","UserEntity","token","jwt","sign","JWT_SECRET","expiresIn","err","findAll","result","orderBy","createdAt","page","query","getTopUsers","$queryRaw"],"mappings":";;;;+BAWaA;;;eAAAA;;;qEATG;oCACW;uBACiB;qBACT;0BACR;wBACA;;;;;;AAE3B,MAAMC,WAAWC,IAAAA,sBAAe,EAAC;IAAEC,SAAS;AAAG;AAExC,MAAMH,uBAAuBI,8BAAU;IAC5C,MAAMC,OACJC,GAAY,EACZC,GAAa,EACbC,IAAkB,EACuC;QACzD,IAAI;YACF,IAAI,MAAMC,WAAM,CAACC,IAAI,CAACC,SAAS,CAAC;gBAAEC,OAAO;oBAAEC,OAAOP,IAAIQ,IAAI,CAACD,KAAK;gBAAC;gBAAGE,QAAQC,eAAU;YAAC,IAAI;gBACzF,OAAOZ,8BAAU,CAACa,KAAK,CAACV,KAAK,uBAAuB,CAAC,GAAGW,iBAAU,CAACC,WAAW;YAChF;YAEA,MAAMT,OAAO,MAAMD,WAAM,CAACC,IAAI,CAACL,MAAM,CAAC;gBAAEe,MAAM;oBAAE,GAAGd,IAAIQ,IAAI;gBAAC;gBAAGC,QAAQC,eAAU;YAAC;YAElF,OAAOZ,8BAAU,CAACiB,OAAO,CAACd,KAAK;gBAC7BG,MAAMN,8BAAU,CAACkB,SAAS,CAACC,oBAAU,EAAEb;gBACvCc,OAAOC,qBAAG,CAACC,IAAI,CAAC;oBAAEhB;gBAAK,GAAGiB,kBAAU,EAAE;oBAAEC,WAAW;gBAAM;YAC3D;QACF,EAAE,OAAOC,KAAK;YACZrB,KAAKqB;QACP;IACF;IAEA,MAAMC,QAAQxB,GAAY,EAAEC,GAAa,EAAEC,IAAkB,EAAE;QAC7D,IAAI;YACF,6CAA6C;YAC7C,qDAAqD;YACrD,MAAMuB,SAAS,MAAM9B,SACnBQ,WAAM,CAACC,IAAI,EACX;gBACEK,QAAQ;oBACN,GAAGC,eAAU;gBACf;gBACAgB,SAAS;oBACPC,WAAW;gBACb;YACF,GACA;gBAAEC,MAAM5B,IAAI6B,KAAK,CAACD,IAAI;YAAW;YAGnC,OAAO9B,8BAAU,CAACiB,OAAO,CAACd,KAAKwB;QACjC,EAAE,OAAOF,KAAK;YACZrB,KAAKqB;QACP;IACF;IAEA,MAAMO,YAAY9B,GAAY,EAAEC,GAAa,EAAEC,IAAkB,EAAE;QACjE,IAAI;YACF,2EAA2E;YAC3E,6DAA6D;YAC7D,kFAAkF;YAClF,+GAA+G;YAC/G,oGAAoG;YACpG,OAAOJ,8BAAU,CAACiB,OAAO,CACvBd,KACA,MAAME,WAAM,CAAC4B,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAwCvB,CAAC;QAEL,EAAE,OAAOR,KAAK;YACZrB,KAAKqB;QACP;IACF;AACF"}