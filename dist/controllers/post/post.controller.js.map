{"version":3,"sources":["../../../src/controllers/post/post.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { Post, Prisma } from '@prisma/client'\nimport { Controller } from '../abstract.controller'\nimport { PostPolicy } from '@/policies'\nimport { postSelect, prisma } from '@/lib'\nimport { PostEntity } from '@/entities'\nimport { StatusCode, createPaginator } from '@/utils'\n\nconst paginate = createPaginator({ perPage: 20 })\n\nexport class PostController extends Controller {\n  async createPost(req: Request, res: Response, next: NextFunction) {\n    if (await PostController.validateRequest(req)) {\n      return Controller.error(res, 'Unauthorized access')\n    }\n\n    const { title, content } = req.body\n\n    try {\n      const post = await prisma.post.create({\n        data: { title, content, userId: req.params.id },\n        select: { ...postSelect },\n      })\n\n      return Controller.success(\n        res,\n        Controller.mapEntity<PostEntity>(PostEntity, post),\n        'Post Created Successfully',\n        StatusCode.CREATED,\n      )\n    } catch (err) {\n      next(err)\n    }\n  }\n\n  static async validateRequest(req: Request) {\n    return (\n      (req.user && !PostPolicy.canCreate(req.user, req.params?.id)) ||\n      !(await prisma.user.findFirst({ where: { id: req.params.id }, select: { id: true } }))\n    )\n  }\n\n  async getUserPosts(req: Request, res: Response, next: NextFunction) {\n    if (await PostController.validateRequest(req)) {\n      return Controller.error(res, 'Unauthorized access')\n    }\n\n    try {\n      const result = await paginate<Post, Prisma.PostFindManyArgs>(\n        prisma.post,\n        {\n          where: {\n            userId: req.params.id,\n          },\n          select: {\n            ...postSelect,\n          },\n          orderBy: {\n            createdAt: 'desc',\n          },\n        },\n        { page: req.query.page as string | number },\n      )\n\n      return Controller.success(res, result)\n    } catch (err) {\n      next(err)\n    }\n  }\n}\n"],"names":["PostController","paginate","createPaginator","perPage","Controller","createPost","req","res","next","validateRequest","error","title","content","body","post","prisma","create","data","userId","params","id","select","postSelect","success","mapEntity","PostEntity","StatusCode","CREATED","err","user","PostPolicy","canCreate","findFirst","where","getUserPosts","result","orderBy","createdAt","page","query"],"mappings":";;;;+BAUaA;;;eAAAA;;;oCARc;0BACA;qBACQ;0BACR;uBACiB;AAE5C,MAAMC,WAAWC,IAAAA,sBAAe,EAAC;IAAEC,SAAS;AAAG;AAExC,MAAMH,uBAAuBI,8BAAU;IAC5C,MAAMC,WAAWC,GAAY,EAAEC,GAAa,EAAEC,IAAkB,EAAE;QAChE,IAAI,MAAMR,eAAeS,eAAe,CAACH,MAAM;YAC7C,OAAOF,8BAAU,CAACM,KAAK,CAACH,KAAK;QAC/B;QAEA,MAAM,EAAEI,KAAK,EAAEC,OAAO,EAAE,GAAGN,IAAIO,IAAI;QAEnC,IAAI;YACF,MAAMC,OAAO,MAAMC,WAAM,CAACD,IAAI,CAACE,MAAM,CAAC;gBACpCC,MAAM;oBAAEN;oBAAOC;oBAASM,QAAQZ,IAAIa,MAAM,CAACC,EAAE;gBAAC;gBAC9CC,QAAQ;oBAAE,GAAGC,eAAU;gBAAC;YAC1B;YAEA,OAAOlB,8BAAU,CAACmB,OAAO,CACvBhB,KACAH,8BAAU,CAACoB,SAAS,CAAaC,oBAAU,EAAEX,OAC7C,6BACAY,iBAAU,CAACC,OAAO;QAEtB,EAAE,OAAOC,KAAK;YACZpB,KAAKoB;QACP;IACF;IAEA,aAAanB,gBAAgBH,GAAY,EAAE;QACzC,OACE,AAACA,IAAIuB,IAAI,IAAI,CAACC,oBAAU,CAACC,SAAS,CAACzB,IAAIuB,IAAI,EAAEvB,IAAIa,MAAM,EAAEC,OACzD,CAAE,MAAML,WAAM,CAACc,IAAI,CAACG,SAAS,CAAC;YAAEC,OAAO;gBAAEb,IAAId,IAAIa,MAAM,CAACC,EAAE;YAAC;YAAGC,QAAQ;gBAAED,IAAI;YAAK;QAAE;IAEvF;IAEA,MAAMc,aAAa5B,GAAY,EAAEC,GAAa,EAAEC,IAAkB,EAAE;QAClE,IAAI,MAAMR,eAAeS,eAAe,CAACH,MAAM;YAC7C,OAAOF,8BAAU,CAACM,KAAK,CAACH,KAAK;QAC/B;QAEA,IAAI;YACF,MAAM4B,SAAS,MAAMlC,SACnBc,WAAM,CAACD,IAAI,EACX;gBACEmB,OAAO;oBACLf,QAAQZ,IAAIa,MAAM,CAACC,EAAE;gBACvB;gBACAC,QAAQ;oBACN,GAAGC,eAAU;gBACf;gBACAc,SAAS;oBACPC,WAAW;gBACb;YACF,GACA;gBAAEC,MAAMhC,IAAIiC,KAAK,CAACD,IAAI;YAAoB;YAG5C,OAAOlC,8BAAU,CAACmB,OAAO,CAAChB,KAAK4B;QACjC,EAAE,OAAOP,KAAK;YACZpB,KAAKoB;QACP;IACF;AACF"}