{"version":3,"sources":["../../../src/controllers/post/post.controller.test.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express'\nimport { PostController } from './post.controller'\nimport { prisma } from '@/lib'\nimport { StatusCode } from '@/utils'\n\ndescribe('PostController', () => {\n  let mockRequest: Request\n  let mockResponse: Response\n  let mockNext: NextFunction\n\n  beforeEach(() => {\n    mockRequest = {\n      body: {},\n      params: { id: 'user-id' },\n      user: null,\n      query: {},\n    } as any\n    mockResponse = {\n      status: vi.fn().mockReturnThis(),\n      json: vi.fn(),\n    } as any\n    mockNext = vi.fn() as any\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('createPost', () => {\n    it('should create a post and return success response', async () => {\n      // Mock Prisma functions\n      const mockCreate = vi.fn()\n      const mockFindFirst = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.post.create = mockCreate\n\n      const mockCreatedPost = {\n        id: 'post-id',\n        title: 'Test Post',\n        content: 'Test Content',\n        userId: 'user-id',\n      }\n\n      mockFindFirst.mockResolvedValue({ id: 'user-id' })\n      mockCreate.mockResolvedValue(mockCreatedPost)\n\n      const postController = new PostController()\n      mockRequest.user = { id: 'user-id' }\n\n      await postController.createPost(mockRequest, mockResponse, mockNext)\n\n      expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.CREATED)\n\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: expect.any(Object),\n        message: 'Post Created Successfully',\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('validateRequest', () => {\n    // ... other tests ...\n\n    it('should return undefined for unauthorized access', async () => {\n      // Mock Prisma function\n      prisma.user.findFirst = vi.fn().mockResolvedValue(null)\n\n      const postController = new PostController()\n\n      const result = await postController.createPost(mockRequest, mockResponse, mockNext)\n\n      expect(result).toBe(undefined)\n    })\n  })\n\n  describe.skip('getUserPosts', () => {\n    it('should get user posts and return success response', async () => {\n      const mockPaginate = vi.fn()\n      const mockFindFirst = vi.fn()\n\n      prisma.user.findFirst = mockFindFirst\n      prisma.post.findMany = mockPaginate\n\n      // Mock successful paginate call\n      const mockUserPosts = [\n        { id: 'post-id', title: 'Test Post', content: 'Test Content', userId: 'user-id' },\n      ]\n\n      mockPaginate.mockResolvedValue(mockUserPosts)\n      mockFindFirst.mockResolvedValue({ id: 'user-id' })\n\n      const postController = new PostController()\n\n      // mockRequest.user = { id: 'user-id' }\n      mockRequest.params = { id: 'user-id' }\n      mockRequest.query = { page: '1' }\n\n      await postController.getUserPosts(mockRequest, mockResponse, mockNext)\n\n      expect(mockPaginate).toHaveBeenCalledWith(\n        prisma.post,\n        {\n          where: { userId: 'user-id' },\n          select: expect.any(Object),\n          orderBy: { createdAt: 'desc' },\n        },\n        { page: '1' },\n      )\n\n      expect(mockResponse.status).toHaveBeenCalledWith(StatusCode.OK)\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: mockUserPosts,\n      })\n      expect(mockNext).not.toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["describe","mockRequest","mockResponse","mockNext","beforeEach","body","params","id","user","query","status","vi","fn","mockReturnThis","json","afterEach","clearAllMocks","it","mockCreate","mockFindFirst","prisma","findFirst","post","create","mockCreatedPost","title","content","userId","mockResolvedValue","postController","PostController","createPost","expect","toHaveBeenCalledWith","StatusCode","CREATED","success","data","any","Object","message","not","toHaveBeenCalled","result","toBe","undefined","skip","mockPaginate","findMany","mockUserPosts","page","getUserPosts","where","select","orderBy","createdAt","OK"],"mappings":"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"}