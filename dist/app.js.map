{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import express from 'express'\nimport type { Express, NextFunction, Request, Response } from 'express'\nimport { ENVIRONMENT, PORT, cache } from '@config'\nimport compression from 'compression'\nimport helmet from 'helmet'\nimport errorHandler from 'errorhandler'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport { ErrorInterceptor } from '@middlewares'\nimport routes from '@routes'\nimport rateLimit, { type Options } from 'express-rate-limit'\n\nexport class App {\n  public app: Express\n  public env: string\n  public port: string | number\n\n  constructor() {\n    this.app = express()\n    this.env = ENVIRONMENT ?? 'development'\n    this.port = PORT ?? 5500\n\n    this.initializeMiddlewares().initializeRoutes().initializeInterceptors()\n  }\n\n  public getApplication(): Express {\n    return this.app\n  }\n\n  public listen(): void {\n    this.app.listen(this.port, () => {\n      console.log('=================================')\n      console.log(`======= ENV: ${this.env} =======`)\n      console.log(`ðŸš€ App listening on the port ${this.port}`)\n      console.log('=================================')\n    })\n\n    this.initializeCache()\n  }\n\n  private initializeMiddlewares(): this {\n    const mapCorsOptions = function (req: any, callback: (...args: any) => void): void {\n      const options = {\n        origin: false as boolean | string | string[],\n        preflightContinue: false,\n        allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],\n        methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n      }\n\n      if (['development', 'test', 'local'].includes(ENVIRONMENT as string)) {\n        options.origin = '*'\n      } else {\n        options.origin = ['*'] // change to authorized urls\n      }\n\n      callback(null, options)\n    }\n\n    this.app.use(cors(mapCorsOptions))\n    this.app.use(helmet())\n    this.app.use(compression())\n    this.app.use(bodyParser.json())\n    this.app.use(express.json({ limit: '5mb' }))\n    this.app.use(express.urlencoded({ extended: true }))\n\n    return this\n  }\n\n  private initializeInterceptors(): this {\n    this.app.use(ErrorInterceptor)\n\n    if (ENVIRONMENT === 'development') {\n      this.app.use(errorHandler())\n    }\n\n    return this\n  }\n\n  private initializeCache(): this {\n    cache\n      .connect()\n      .then(() => {\n        console.log('Redis connected successfully')\n      })\n      .catch((error) => {\n        console.error('Failed to connect to Redis', error)\n      })\n\n    return this\n  }\n\n  private initializeRoutes(): this {\n    const apiLimiter = rateLimit({\n      windowMs: 2 * 60 * 1000, // 2 minutes\n      max: 1000,\n      standardHeaders: true,\n      legacyHeaders: false,\n      handler: (req: Request, res: Response, next: NextFunction, optionsUsed: Options) => {\n        return res\n          .status(optionsUsed.statusCode)\n          .json({ status: false, message: optionsUsed.message })\n      },\n    })\n\n    this.app.use('/api', apiLimiter, routes)\n\n    this.app.use('*', (req: Request, res: Response) => {\n      res.status(404).json({\n        message: 'Invalid Route',\n        success: false,\n      })\n    })\n\n    return this\n  }\n}\n"],"names":["App","getApplication","app","listen","port","console","log","env","initializeCache","initializeMiddlewares","mapCorsOptions","req","callback","options","origin","preflightContinue","allowedHeaders","methods","includes","ENVIRONMENT","use","cors","helmet","compression","bodyParser","json","express","limit","urlencoded","extended","initializeInterceptors","ErrorInterceptor","errorHandler","cache","connect","then","catch","error","initializeRoutes","apiLimiter","rateLimit","windowMs","max","standardHeaders","legacyHeaders","handler","res","next","optionsUsed","status","statusCode","message","routes","success","constructor","PORT"],"mappings":"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"}